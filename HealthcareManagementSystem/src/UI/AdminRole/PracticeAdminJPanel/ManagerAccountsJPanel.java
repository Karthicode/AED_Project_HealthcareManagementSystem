/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.AdminRole.PracticeAdminJPanel;


import HealthCareManager.Pharmacist.MedicalAdvisorDirectory;
import WorkerProvider.Worker;
import IntegrationSystem.HealthcareSystemOrganizationIntegration;

import HealthCareSystem.Directorate.DirectorateDirectory;
import HealthCareSystem.Directorate.Directorate;
import HealthCareManager.Practitioner.CertifiedPractitioner;
import HealthCareManager.Practitioner.PractitionerDirectory;
import HealthCareManager.Pharmacist.MedicalAdvisor;
import HealthCareManager.PartnerInfirmaries.PartnerInfirmiries;


import HealthCareMainSystem.UserRoles.DirectorateRole;
import HealthCareMainSystem.UserRoles.CertifiedPractitionerRole;
import HealthCareMainSystem.UserRoles.MedicalAdvisorRole;
import HealthCareMainSystem.UserRoles.Role;

import IntegrationSystem.ConsumerRecords;
import IntegrationSystem.EnterpriseUserDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author harshithnarahari
 */
public class ManagerAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagerAccountsJPanel
     */
    JPanel JPanelProcessContainer;
    HealthcareSystemOrganizationIntegration healthcareSystemOrganizationIntegration;
    PractitionerDirectory practitionerDirectory;
    MedicalAdvisorDirectory medicalAdvisorDirectory;
    ConsumerRecords consumerRecords;
    EnterpriseUserDirectory enterpriseUserDirectory;
    PartnerInfirmiries infirmiries;
    public ManagerAccountsJPanel(JPanel userProcessContainer , HealthcareSystemOrganizationIntegration hospitalManagementEcoSystem, PartnerInfirmiries infirmiries) {
        
        this.JPanelProcessContainer = userProcessContainer;
        this.healthcareSystemOrganizationIntegration = hospitalManagementEcoSystem;
        this.infirmiries = infirmiries;
        initComponents();
        if(infirmiries.getDoctorDirectory()== null)
           infirmiries.setDoctorDirectory(new PractitionerDirectory());
        if(infirmiries.getNurseDirectory()== null)
           infirmiries.setNurseDirectory(new MedicalAdvisorDirectory());
        
        insertRoleBasedSelectionBox();
        insertDataInJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Header = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmployee = new javax.swing.JTable();
        CreateButton = new javax.swing.JButton();
        jTextName = new javax.swing.JTextField();
        UpdateButton = new javax.swing.JButton();
        jLabelPassword = new javax.swing.JLabel();
        jTextPassword = new javax.swing.JTextField();
        jTextID = new javax.swing.JTextField();
        Designation = new javax.swing.JLabel();
        DesignationToggle = new javax.swing.JComboBox<>();
        jLabelID = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JButton();
        jLabelName = new javax.swing.JLabel();
        bgdimg = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 70, 169));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Header.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        Header.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Header.setText("Operational Accounts");
        add(Header, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 706, -1));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButton2.setText("HOME");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 50, -1, -1));

        jTableEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Employee ID", "Employee Name", "Role", "Password"
            }
        ));
        jTableEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmployee);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, 570, 90));

        CreateButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CreateButton.setText("CREATE");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });
        add(CreateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 620, 110, 40));
        add(jTextName, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 220, 270, -1));

        UpdateButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        UpdateButton.setText("UPDATE");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 620, 110, 40));

        jLabelPassword.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabelPassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelPassword.setText("Password:");
        add(jLabelPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, 140, -1));

        jTextPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextPasswordActionPerformed(evt);
            }
        });
        add(jTextPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 260, 270, -1));

        jTextID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextIDActionPerformed(evt);
            }
        });
        add(jTextID, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 170, 270, -1));

        Designation.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Designation.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Designation.setText("Designation");
        add(Designation, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 310, 140, -1));

        DesignationToggle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DesignationToggle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Nurse" }));
        DesignationToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesignationToggleActionPerformed(evt);
            }
        });
        add(DesignationToggle, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 310, 130, -1));

        jLabelID.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabelID.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelID.setText("ID:");
        add(jLabelID, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 170, 140, -1));

        DeleteButton.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        DeleteButton.setText("DELETE");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 620, 110, 40));

        jLabelName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabelName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelName.setText("Name:");
        add(jLabelName, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 220, 140, -1));
        add(bgdimg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BackGroundImages/COVID-ICU-illustration (1) (1) (1).jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 1780, 960));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        CardLayout crdLyt = (CardLayout) JPanelProcessContainer.getLayout();
            crdLyt.show(JPanelProcessContainer,"hospitalAdminWorkAreaJPanel");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPasswordActionPerformed

    private void jTextIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextIDActionPerformed

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ArrayList<String> user_input = validate_Null_Inputs();
        EnterpriseUserDirectory usersList = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        if(usersList.verifyUserUnique(user_input.get(0))){
            
            
            if(user_input.get(2) == "Doctor"){

                consumerRecords = new ConsumerRecords(user_input.get(0), user_input.get(3), new CertifiedPractitionerRole());
                usersList.addConsumerData(consumerRecords);
                CertifiedPractitioner doctor = new CertifiedPractitioner();
                doctor.setPractitionerId(user_input.get(0));
                doctor.setPractitioner_Name(user_input.get(1));                
                practitionerDirectory.addDoctor(user_input.get(0), doctor);
                infirmiries.setDoctorDirectory(practitionerDirectory);
                consumerRecords.setInfirmiries(infirmiries);
            }
            if(user_input.get(2) == "Nurse"){

                consumerRecords = new ConsumerRecords(user_input.get(0), user_input.get(3), new MedicalAdvisorRole());
                usersList.addConsumerData(consumerRecords);
                MedicalAdvisor nurse = new MedicalAdvisor();
                nurse.setAdvisorId(user_input.get(0));
                nurse.setAdvisorName(user_input.get(1));                
                medicalAdvisorDirectory.addAdvisor(user_input.get(0), nurse);
                infirmiries.setNurseDirectory(medicalAdvisorDirectory);
                consumerRecords.setInfirmiries(infirmiries);
            }
            
            JOptionPane.showMessageDialog(this, "New Employee Information has been added.");
            model.addRow(new Object[]{consumerRecords,user_input.get(1),user_input.get(2),user_input.get(3)});
            clearFields();
        }
        else{
            JOptionPane.showMessageDialog(this, "This username is not available. Please select a new one.");
        }
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ConsumerRecords select_account_details = (ConsumerRecords)model.getValueAt(selected_row_ix, 0);        
        enterpriseUserDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        ArrayList<ConsumerRecords> userAccountList = enterpriseUserDirectory.get_User_Details();
        for(ConsumerRecords userAccount: userAccountList)
        {
            if(userAccount.getEmail_Id().equals(select_account_details.getEmail_Id()))
            {
                PartnerInfirmiries hospital = userAccount.getInfirmiries();
                ArrayList<String> user_input = validate_Null_Inputs();
//                model.setValueAt(user_input.get(1), selected_row_ix, 0);
                model.setValueAt(user_input.get(1), selected_row_ix, 1);
//                model.setValueAt(user_input.get(2), selected_row_ix, 2);
                model.setValueAt(user_input.get(3), selected_row_ix, 3);
                enterpriseUserDirectory.updateEnterpriseUser(set_user_input_values(userAccount, user_input));
                break;
            }
        }   
        
//        healthcareSystemOrganizationIntegration.setRestaurantDirectory(restaurantDirectory);
        JOptionPane.showMessageDialog(this, "Values updated");
//        addrecordstotable();
        
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        int selected_row_ix = jTableEmployee.getSelectedRow();

        if(selected_row_ix < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ConsumerRecords select_user_account_details = (ConsumerRecords)model.getValueAt(selected_row_ix, 0);
        enterpriseUserDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        enterpriseUserDirectory.removeConsumerRecord(select_user_account_details);
//        ecosystem.setRestaurantDirectory(restaurantDirectory);
        model.removeRow(selected_row_ix);
        insertDataInJTable();
        clearFields();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void jTableEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeMouseClicked
        // TODO add your handling code here:
        CreateButton.setEnabled(false);
        DesignationToggle.setEnabled(false);
        int selected_row_ix = jTableEmployee.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        ConsumerRecords select_user_account_details = (ConsumerRecords)model.getValueAt(selected_row_ix, 0);
        jTextID.setEditable(false);
        jTextID.setText(select_user_account_details.getEmail_Id());
        
        Role role = select_user_account_details.getRole();
        System.out.println("role.toString(): "+role.toString());
        DesignationToggle.setSelectedItem(role.toString()); 
        
        
        if(role.toString().equals("Nurse")){
            PartnerInfirmiries infirmiries = select_user_account_details.getInfirmiries();
            medicalAdvisorDirectory = infirmiries.getNurseDirectory();
            HashMap<String, MedicalAdvisor> nurseList = medicalAdvisorDirectory.getAdvisorList();
            MedicalAdvisor nurse = nurseList.get(select_user_account_details.getEmail_Id());
            jTextName.setText(nurse.getAdvisorName());
        }
        else if(role.toString().equals("Doctor")){
            PartnerInfirmiries hospital = select_user_account_details.getInfirmiries();
            practitionerDirectory = hospital.getDoctorDirectory();
            HashMap<String, CertifiedPractitioner> doctorList = practitionerDirectory.getPractitioners();
            CertifiedPractitioner doctor = doctorList.get(select_user_account_details.getEmail_Id());
            jTextName.setText(doctor.getPractitioner_Name());
        }
        
        jTextPassword.setText(select_user_account_details.getPassword());
        
    }//GEN-LAST:event_jTableEmployeeMouseClicked

    private void DesignationToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesignationToggleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DesignationToggleActionPerformed
    private ConsumerRecords set_user_input_values(ConsumerRecords userAccount, ArrayList<String> user_input) {
//        consumerRecords.getEmployee().setEmployee_id(user_input.get(0));
//        consumerRecords.getEmployee().setEmployee_name(user_input.get(1));
        userAccount.setPassword(user_input.get(3));
        return userAccount;
    }
    private void clearFields(){
        jTextID.setText("");
        jTextName.setText("");
        jTextPassword.setText("");
        DesignationToggle.setSelectedItem("");
    }
    
    public ArrayList<String> validate_Null_Inputs(){
        ArrayList<String> user_input = new ArrayList<>();
        String user_emp_id = jTextID.getText();
        String user_emp_name = jTextName.getText();
        String user_password = jTextPassword.getText();
        String user_role = (String) DesignationToggle.getSelectedItem();

        
        if(user_emp_id.isEmpty()){
            JOptionPane.showMessageDialog(this, "User ID can't be left empty.");
        }
        else if(user_emp_name.isEmpty()){
            JOptionPane.showMessageDialog(this, "User Name can't be left empty.");
        }
        else if(user_password.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a Password.");
        }
        else if(user_role.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please select a Role.");
        }
        
        user_input.add(user_emp_id);
        user_input.add(user_emp_name);
        user_input.add(user_role);
        user_input.add(user_password);
        
        return user_input;
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel Designation;
    private javax.swing.JComboBox<String> DesignationToggle;
    private javax.swing.JLabel Header;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel bgdimg;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmployee;
    private javax.swing.JTextField jTextID;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextPassword;
    // End of variables declaration//GEN-END:variables

    

    private void insertRoleBasedSelectionBox() {
        DesignationToggle.removeAllItems();
        DesignationToggle.addItem("");
        DesignationToggle.addItem("Nurse");
        DesignationToggle.addItem("Doctor");
    }

    private void insertDataInJTable() {
        practitionerDirectory = infirmiries.getDoctorDirectory();
        medicalAdvisorDirectory = infirmiries.getNurseDirectory();
    
        DefaultTableModel model = (DefaultTableModel) jTableEmployee.getModel();
        model.setRowCount(0);
//        ArrayList<Accountant> accountantList = accountantDirectory.getAccountantList();
//        for(Accountant accountant: accountantList)
//        {
//            model.addRow(new Object[]{accountant.getUserAccount(),accountant.getUserAccount().getEmployee().getEmployee_name(),"Accountant",accountant.getUserAccount().getPassword()});
//        }
        EnterpriseUserDirectory userAccountDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        ArrayList<ConsumerRecords> usersList = userAccountDirectory.get_User_Details();
//        hospitalDirectory = healthcareSystemOrganizationIntegration.getHospitalDirectory();
        
        model.setRowCount(0);
//        ArrayList<Hospital> hospitalList = hospitalDirectory.getHospitalList();
        for(ConsumerRecords userAccount: usersList)
        {   
            if(userAccount.getRole().toString() == "Nurse" && userAccount.getInfirmiries().equals(infirmiries)){
                
                medicalAdvisorDirectory = infirmiries.getNurseDirectory();
                HashMap<String,MedicalAdvisor> nurseList = medicalAdvisorDirectory.getAdvisorList();
                MedicalAdvisor nurse = nurseList.get(userAccount.getEmail_Id());
                model.addRow(new Object[]{userAccount,nurse.getAdvisorName(),userAccount.getRole(),userAccount.getPassword()});
            }
            else if(userAccount.getRole().toString() == "Doctor" && userAccount.getInfirmiries().equals(infirmiries)){
                
                practitionerDirectory = infirmiries.getDoctorDirectory();
                HashMap<String, CertifiedPractitioner> doctorList = practitionerDirectory.getPractitioners();
                CertifiedPractitioner doctor = doctorList.get(userAccount.getEmail_Id());
                model.addRow(new Object[]{userAccount,doctor.getPractitioner_Name(),userAccount.getRole(),userAccount.getPassword()});
            }
        }

        jTableEmployee.setModel(model);
    }
    
    
}
