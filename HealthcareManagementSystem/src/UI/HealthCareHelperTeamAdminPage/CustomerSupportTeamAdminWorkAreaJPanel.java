/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.HealthCareHelperTeamAdminPage;



import IntegrationSystem.HealthcareSystemOrganizationIntegration;

import HeathcareProviderHelp.Model.HealthCareProviderDirectory;
import HeathcareProviderHelp.Model.RegisteredMember;
import model.HelperTeam.HelperTeam;


import HealthCareMainSystem.UserRoles.HelperTeamRoles;
import HealthCareMainSystem.UserRoles.RoleBasedAuthPanel;

import IntegrationSystem.ConsumerRecords;
import IntegrationSystem.EnterpriseUserDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author karthik 
 */
public class CustomerSupportTeamAdminWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OperationalAccountsPage
     */
    JPanel JPanelProcessContainer;
    HealthcareSystemOrganizationIntegration healthcareSystemOrganizationIntegration;
    HealthCareProviderDirectory healthCareProviderDirectory;
    
    ConsumerRecords consumers;
    ConsumerRecords consumerLogin;
    EnterpriseUserDirectory enterpriseUserDirectory;
    HelperTeam helperTeamSupport;
    public CustomerSupportTeamAdminWorkAreaJPanel(JPanel panelContainer , HealthcareSystemOrganizationIntegration healthcareSystemOrganizationIntegration, HelperTeam customerSupportTeam, ConsumerRecords userAccountLogin) {
        
        this.JPanelProcessContainer = panelContainer;
        this.healthcareSystemOrganizationIntegration = healthcareSystemOrganizationIntegration;
        this.helperTeamSupport = customerSupportTeam;
        this.consumerLogin = userAccountLogin;
        initComponents();
        if(customerSupportTeam.getCustomerSupportMemberDirectory()== null)
           customerSupportTeam.setCustomerSupportMemberDirectory(new HealthCareProviderDirectory());
        InsertDataToJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelHeader = new javax.swing.JLabel();
        jButtonExit = new javax.swing.JButton();
        jScrollPaneEmployee = new javax.swing.JScrollPane();
        jTableEmployeeDetails = new javax.swing.JTable();
        jButtonCreateEmployee = new javax.swing.JButton();
        jTextFieldEmployeeName = new javax.swing.JTextField();
        jButtonUpdateEmployee = new javax.swing.JButton();
        jLabelEmployeePassword = new javax.swing.JLabel();
        jTextFieldPasswords = new javax.swing.JTextField();
        jTextFieldEmployeeID = new javax.swing.JTextField();
        jLabelEmployeeID = new javax.swing.JLabel();
        jButtonDeleteEmployee = new javax.swing.JButton();
        jLabelEmployeeName = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 70, 169));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelHeader.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabelHeader.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHeader.setText("Employee Details");
        add(jLabelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 35, 706, 60));

        jButtonExit.setBackground(new java.awt.Color(0, 0, 0));
        jButtonExit.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jButtonExit.setForeground(new java.awt.Color(255, 255, 255));
        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });
        add(jButtonExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, -1, -1));

        jTableEmployeeDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Employee ID", "Employee Name", "Password"
            }
        ));
        jTableEmployeeDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmployeeDetailsMouseClicked(evt);
            }
        });
        jScrollPaneEmployee.setViewportView(jTableEmployeeDetails);

        add(jScrollPaneEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 400, 630, 130));

        jButtonCreateEmployee.setBackground(new java.awt.Color(0, 0, 0));
        jButtonCreateEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCreateEmployee.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreateEmployee.setText("CREATE");
        jButtonCreateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateEmployeeActionPerformed(evt);
            }
        });
        add(jButtonCreateEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 300, 100, 40));
        add(jTextFieldEmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 200, 340, 30));

        jButtonUpdateEmployee.setBackground(new java.awt.Color(0, 0, 0));
        jButtonUpdateEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonUpdateEmployee.setForeground(new java.awt.Color(255, 255, 255));
        jButtonUpdateEmployee.setText("UPDATE");
        jButtonUpdateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateEmployeeActionPerformed(evt);
            }
        });
        add(jButtonUpdateEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 300, 100, 40));

        jLabelEmployeePassword.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelEmployeePassword.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEmployeePassword.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelEmployeePassword.setText("Password:");
        add(jLabelEmployeePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 160, 100, -1));

        jTextFieldPasswords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPasswordsActionPerformed(evt);
            }
        });
        add(jTextFieldPasswords, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 200, 330, 30));

        jTextFieldEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEmployeeIDActionPerformed(evt);
            }
        });
        add(jTextFieldEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 320, 30));

        jLabelEmployeeID.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelEmployeeID.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEmployeeID.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelEmployeeID.setText("Employee ID:");
        add(jLabelEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 104, -1));

        jButtonDeleteEmployee.setBackground(new java.awt.Color(0, 0, 0));
        jButtonDeleteEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonDeleteEmployee.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDeleteEmployee.setText("DELETE");
        jButtonDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteEmployeeActionPerformed(evt);
            }
        });
        add(jButtonDeleteEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 300, 100, 40));

        jLabelEmployeeName.setFont(new java.awt.Font("Dubai Medium", 1, 14)); // NOI18N
        jLabelEmployeeName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelEmployeeName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabelEmployeeName.setText("Employee Name:");
        add(jLabelEmployeeName, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 160, 120, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        // TODO add your handling code here:
        CardLayout crdLyt = (CardLayout) JPanelProcessContainer.getLayout();
            crdLyt.show(JPanelProcessContainer,"Sysadmin");
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTextFieldPasswordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPasswordsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPasswordsActionPerformed

    private void jTextFieldEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldEmployeeIDActionPerformed

    private void jButtonCreateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateEmployeeActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeDetails.getModel();
        ArrayList<String> user_input = check_empty_field();
        EnterpriseUserDirectory usersList = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        if(usersList.verifyUserUnique(user_input.get(0))){
            
            consumers = new ConsumerRecords(user_input.get(0), user_input.get(2),new HelperTeamRoles());
            usersList.addConsumerData(consumers);
            RegisteredMember customerSupportMember = new RegisteredMember();
            customerSupportMember.setHelperGroupId(user_input.get(0));
            customerSupportMember.setQualifiedMemberName(user_input.get(1));  
            healthCareProviderDirectory.addHealtcareProvider(user_input.get(0), customerSupportMember);
            helperTeamSupport.setCustomerSupportMemberDirectory(healthCareProviderDirectory);
            consumers.setHelperTeamDir(helperTeamSupport);
            
            
            JOptionPane.showMessageDialog(this, "New Employee Information has been added.");
            model.addRow(new Object[]{consumers,user_input.get(1),user_input.get(2)});
            remove_empty_input_Values();
        }
        else{
            JOptionPane.showMessageDialog(this, "This username is not available. Please select a new one.");
        }
    }//GEN-LAST:event_jButtonCreateEmployeeActionPerformed

    private void jButtonUpdateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateEmployeeActionPerformed
        int input_selected_data = jTableEmployeeDetails.getSelectedRow();

        if(input_selected_data < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeDetails.getModel();
        ConsumerRecords select_account_details = (ConsumerRecords)model.getValueAt(input_selected_data, 0);        
        enterpriseUserDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        ArrayList<ConsumerRecords> consumerRecordses = enterpriseUserDirectory.get_User_Details();
        for(ConsumerRecords userAccount: consumerRecordses)
        {
            if(userAccount.getEmail_Id().equals(select_account_details.getEmail_Id()))
            {
                HelperTeam helpers = userAccount.getHelperTeamDir();
                ArrayList<String> user_input = check_empty_field();
                model.setValueAt(user_input.get(1), input_selected_data, 1);
                model.setValueAt(user_input.get(2), input_selected_data, 2);
                enterpriseUserDirectory.updateEnterpriseUser(set_user_input_values(userAccount, user_input));
                break;
            }
        }   
        

        JOptionPane.showMessageDialog(this, "Values updated");
        
    }//GEN-LAST:event_jButtonUpdateEmployeeActionPerformed

    private void jButtonDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteEmployeeActionPerformed
        int get_selectedRow = jTableEmployeeDetails.getSelectedRow();

        if(get_selectedRow < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeDetails.getModel();
        ConsumerRecords select_user_account_details = (ConsumerRecords)model.getValueAt(get_selectedRow, 0);
        enterpriseUserDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        enterpriseUserDirectory.removeConsumerRecord(select_user_account_details);
        model.removeRow(get_selectedRow);
        InsertDataToJTable();
        remove_empty_input_Values();
    }//GEN-LAST:event_jButtonDeleteEmployeeActionPerformed

    private void jTableEmployeeDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmployeeDetailsMouseClicked
        // TODO add your handling code here:
        jButtonCreateEmployee.setEnabled(false);
        int selected_row_ix = jTableEmployeeDetails.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeDetails.getModel();
        ConsumerRecords select_user_account_details = (ConsumerRecords)model.getValueAt(selected_row_ix, 0);
        jTextFieldEmployeeID.setEditable(false);
        jTextFieldEmployeeID.setText(select_user_account_details.getEmail_Id());
        
        RoleBasedAuthPanel role = select_user_account_details.getRole();
        System.out.println("role.toString(): "+role.toString());
        
        
        if(role.toString().equals("CustomerSupportMember")){
            HelperTeam helperTeam = select_user_account_details.getHelperTeamDir();
            healthCareProviderDirectory = helperTeam.getCustomerSupportMemberDirectory();
            HashMap<String, RegisteredMember> accountantList = healthCareProviderDirectory.getRegisteredSupportMemberList();
            RegisteredMember accountant = accountantList.get(select_user_account_details.getEmail_Id());
            jTextFieldEmployeeName.setText(accountant.getQualifiedMemberName());
        }
        
        jTextFieldPasswords.setText(select_user_account_details.getPassword());
        
    }//GEN-LAST:event_jTableEmployeeDetailsMouseClicked
    private ConsumerRecords set_user_input_values(ConsumerRecords userAccount, ArrayList<String> user_input) {
        userAccount.setPassword(user_input.get(2));
        return userAccount;
    }
    private void remove_empty_input_Values(){
        jTextFieldEmployeeID.setText("");
        jTextFieldEmployeeName.setText("");
        jTextFieldPasswords.setText("");
    }
    
    public ArrayList<String> check_empty_field(){
        ArrayList<String> user_input = new ArrayList<>();
        String user_emp_id = jTextFieldEmployeeID.getText();
        String user_emp_name = jTextFieldEmployeeName.getText();
        String user_password = jTextFieldPasswords.getText();

        
        if(user_emp_id.isEmpty()){
            JOptionPane.showMessageDialog(this, "User ID can't be left empty.");
        }
        else if(user_emp_name.isEmpty()){
            JOptionPane.showMessageDialog(this, "User Name can't be left empty.");
        }
        else if(user_password.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter a Password.");
        }
        
        
        user_input.add(user_emp_id);
        user_input.add(user_emp_name);
        user_input.add(user_password);
        
        return user_input;
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCreateEmployee;
    private javax.swing.JButton jButtonDeleteEmployee;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonUpdateEmployee;
    private javax.swing.JLabel jLabelEmployeeID;
    private javax.swing.JLabel jLabelEmployeeName;
    private javax.swing.JLabel jLabelEmployeePassword;
    private javax.swing.JLabel jLabelHeader;
    private javax.swing.JScrollPane jScrollPaneEmployee;
    private javax.swing.JTable jTableEmployeeDetails;
    private javax.swing.JTextField jTextFieldEmployeeID;
    private javax.swing.JTextField jTextFieldEmployeeName;
    private javax.swing.JTextField jTextFieldPasswords;
    // End of variables declaration//GEN-END:variables
    private void addUserAccount(String user_name, String password, String name, HealthCareProviderDirectory customerSupportMemberDirectory, HelperTeam customerSupportTeam){
        EnterpriseUserDirectory usersList = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        consumers = new ConsumerRecords(user_name, password,new HelperTeamRoles());
        usersList.addConsumerData(consumers);
        RegisteredMember customerSupportMember = new RegisteredMember();
        customerSupportMember.setHelperGroupId(user_name);
        customerSupportMember.setQualifiedMemberName(name);  
        customerSupportMemberDirectory.addHealtcareProvider(user_name, customerSupportMember);
        customerSupportTeam.setCustomerSupportMemberDirectory(customerSupportMemberDirectory);
        consumers.setHelperTeamDir(customerSupportTeam);
    }
    private void addDefaultValues(ConsumerRecords userAccountLogin, HealthCareProviderDirectory healthCareProviderDirectory, HelperTeam helperTeam){
        
        EnterpriseUserDirectory userAccountDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        ArrayList<ConsumerRecords> consumerRecordses = userAccountDirectory.get_User_Details();
        if(userAccountLogin.getEmail_Id().equals("helperTeam1")){
            if(userAccountDirectory.verifyUserUnique("helperTeam1"))
                addUserAccount("helperTeam1","pass","helperTeam1", healthCareProviderDirectory, helperTeam);
            if(userAccountDirectory.verifyUserUnique("custsupp2"))
                addUserAccount("helperTeam2","pass","helperTeam2", healthCareProviderDirectory, helperTeam);
            
        }
    }

    private void InsertDataToJTable() {
        healthCareProviderDirectory = helperTeamSupport.getCustomerSupportMemberDirectory();
        addDefaultValues(consumerLogin, healthCareProviderDirectory, helperTeamSupport);
        DefaultTableModel model = (DefaultTableModel) jTableEmployeeDetails.getModel();
        model.setRowCount(0);

        EnterpriseUserDirectory enterpriseUserDirectory = healthcareSystemOrganizationIntegration.getUserAccDirectory();
        ArrayList<ConsumerRecords> consumerRecordses = enterpriseUserDirectory.get_User_Details();
        
        model.setRowCount(0);
        for(ConsumerRecords consumerRecords: consumerRecordses)
        {   
            System.out.println("userAccount.getRole().toString(): "+consumerRecords.getRole().toString());
            if(consumerRecords.getRole().toString() == "CustomerSupportMember" && consumerRecords.getHelperTeamDir().equals(helperTeamSupport)){
                
                healthCareProviderDirectory = helperTeamSupport.getCustomerSupportMemberDirectory();
                HashMap<String, RegisteredMember> accountantList = healthCareProviderDirectory.getRegisteredSupportMemberList();
                RegisteredMember accountant = accountantList.get(consumerRecords.getEmail_Id());
                model.addRow(new Object[]{consumerRecords,accountant.getQualifiedMemberName(),consumerRecords.getPassword()});
            }
        }
        
        jTableEmployeeDetails.setModel(model);
    }
    
    
}
